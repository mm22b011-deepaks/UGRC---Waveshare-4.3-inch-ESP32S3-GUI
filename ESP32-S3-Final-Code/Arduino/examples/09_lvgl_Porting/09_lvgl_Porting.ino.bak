#include <Arduino.h>
#include <esp_display_panel.hpp>
#include "waveshare_sd_card.h"

#include <lvgl.h>
#include "lvgl_v8_port.h"
//#include <demos/lv_demos.h>
esp_expander::CH422G *expander = NULL;

using namespace esp_panel::drivers;
using namespace esp_panel::board;

/**
 * To use the built-in examples and demos of LVGL uncomment the includes below respectively.
 */
 // #include <demos/lv_demos.h>
 // #include <examples/lv_examples.h>
// ---------------------------------------------------------------------------------------------------

lv_obj_t *area_label, *concentration_label, *chart, *slider1, *slider2, *label1, *label2, *file_list;
lv_chart_series_t *series;
static int lowerLimit = 2100, upperLimit = 2400;
const int arraySize = 7500;
int array1[arraySize], array2[arraySize];
String selectedFile;
float m_value = 0.0, c_value = 0.0;

int tempLowerLimit = 0, tempUpperLimit = 100;

void loadCSV(fs::FS &fs, const char *path) {
    String fullPath = String(path);  // Remove the redundant "/"
    Serial.printf("Opening file: %s\n", fullPath.c_str());

    File file = fs.open(fullPath.c_str());  // Direct path access
    if (!file || file.isDirectory()) {
        Serial.println("Failed to open file for reading or file is a directory.");
        return;
    }

    int index = 0;
    while (file.available() && index < arraySize) {
        String line = file.readStringUntil('\n');
        line.trim();

        int separatorIndex = line.indexOf(',');
        if (separatorIndex == -1) {
            separatorIndex = line.indexOf('\t');
        }

        if (separatorIndex != -1) {
            String xStr = line.substring(0, separatorIndex);
            String yStr = line.substring(separatorIndex + 1);

            float x = xStr.toFloat();
            float y = yStr.toFloat();

            array1[index] = static_cast<int>(x);
            array2[index] = static_cast<int>(y);

            index++;
        }
    }

    Serial.printf("Total data points loaded: %d\n", index);
    file.close();
}



void update_area_label() {
    float area = computeAreaUnderCurve();
    float concentration = computeConcentration(area, m_value, c_value);

    Serial.printf("Computed Area: %.2f\n", area);
    Serial.printf("Computed Concentration: %.2f\n", concentration);

    static char areaText[50];
    snprintf(areaText, sizeof(areaText), "Area: %.2f", area);
    lv_label_set_text(area_label, areaText);

    static char concentrationText[50];
    snprintf(concentrationText, sizeof(concentrationText), "Concentration: %.2f", concentration);
    lv_label_set_text(concentration_label, concentrationText);

    lv_refr_now(NULL);
}

void slider_event_cb(lv_event_t *e) {
    lv_obj_t *slider = lv_event_get_target(e);
    int value = lv_slider_get_value(slider);

    if (slider == slider1) {
        tempLowerLimit = value;
        if (tempLowerLimit >= tempUpperLimit) {
            tempLowerLimit = tempUpperLimit - 1;
        }
        lv_label_set_text_fmt(label1, "Wavenumber 1: %d", tempLowerLimit);
    }
    else if (slider == slider2) {
        tempUpperLimit = value;
        if (tempUpperLimit <= tempLowerLimit) {
            tempUpperLimit = tempLowerLimit + 1;
        }
        lv_label_set_text_fmt(label2, "Wavenumber 2: %d", tempUpperLimit);
    }

    if (tempLowerLimit < tempUpperLimit) {
        lowerLimit = tempLowerLimit;
        upperLimit = tempUpperLimit;
        update_area_label();
    }
}

void update_chart() {
    static bool chart_updated = false;

    if (chart_updated) return;

    lowerLimit = 0;
    upperLimit = arraySize - 1;

    int num_points = upperLimit - lowerLimit;
    if (num_points <= 0) return;

    static lv_coord_t data_array[100];
    num_points = min(num_points, 100);

    for (int i = 0; i < num_points; i++) {
        int index = lowerLimit + i;
        if (index < arraySize) {
            data_array[i] = array2[index];
        } else {
            data_array[i] = 0;
        }
    }

    lv_chart_set_point_count(chart, num_points);
    lv_chart_set_ext_y_array(chart, series, data_array);
    lv_chart_refresh(chart);

    chart_updated = true;
}

void file_select_cb(lv_event_t *e) {
    lv_obj_t *btn = lv_event_get_target(e);
    selectedFile = (const char*)lv_list_get_btn_text(file_list, btn);
    Serial.printf("Selected file: %s\n", selectedFile.c_str());

    lv_obj_clean(lv_scr_act());
    createParameterInputPage();
}

lv_obj_t *m_input, *c_input, *keyboard;

void createParameterInputPage() {
    lv_obj_clean(lv_scr_act());

    lv_obj_t *title = lv_label_create(lv_scr_act());
    lv_label_set_text(title, "Enter values for the Equation: y = mx+c:");
    lv_obj_align(title, LV_ALIGN_TOP_MID, 0, 20);

    m_input = lv_textarea_create(lv_scr_act());
    lv_textarea_set_placeholder_text(m_input, "Enter m value");
    lv_obj_set_size(m_input, 250, 40);
    lv_obj_align(m_input, LV_ALIGN_CENTER, -150, -50);
    lv_obj_add_event_cb(m_input, keyboard_event_cb, LV_EVENT_FOCUSED, NULL);

    c_input = lv_textarea_create(lv_scr_act());
    lv_textarea_set_placeholder_text(c_input, "Enter c value");
    lv_obj_set_size(c_input, 250, 40);
    lv_obj_align(c_input, LV_ALIGN_CENTER, 150, -50);
    lv_obj_add_event_cb(c_input, keyboard_event_cb, LV_EVENT_FOCUSED, NULL);

    keyboard = lv_keyboard_create(lv_scr_act());
    lv_keyboard_set_mode(keyboard, LV_KEYBOARD_MODE_NUMBER);
    lv_obj_set_size(keyboard, 350, 150);
    lv_obj_align(keyboard, LV_ALIGN_BOTTOM_MID, 0, -10);
    lv_keyboard_set_textarea(keyboard, m_input);

    lv_obj_t *next_btn = lv_btn_create(lv_scr_act());
    lv_obj_set_size(next_btn, 150, 50);
    lv_obj_align(next_btn, LV_ALIGN_BOTTOM_MID, 300, -10);
    lv_obj_add_event_cb(next_btn, next_button_cb, LV_EVENT_CLICKED, NULL);

    lv_obj_t *btn_label = lv_label_create(next_btn);
    lv_label_set_text(btn_label, "Next");
    lv_obj_center(btn_label);

    static lv_style_t button_style;
    lv_style_init(&button_style);
    lv_style_set_radius(&button_style, 12);
    lv_style_set_border_width(&button_style, 2);
    lv_style_set_border_color(&button_style, lv_palette_main(LV_PALETTE_BLUE));
    lv_style_set_bg_color(&button_style, lv_palette_main(LV_PALETTE_CYAN));
    lv_style_set_text_color(&button_style, lv_color_white());

    lv_obj_add_style(next_btn, &button_style, 0);
}

void keyboard_event_cb(lv_event_t *e) {
    lv_obj_t *ta = lv_event_get_target(e);
    lv_keyboard_set_textarea(keyboard, ta);
}
void next_button_cb(lv_event_t *e) {
    m_value = atof(lv_textarea_get_text(m_input));
    c_value = atof(lv_textarea_get_text(c_input));

    Serial.printf("Entered m: %.2f, c: %.2f\n", m_value, c_value);

    // Ensure selectedFile stores the full path, not just the filename
    String fullFilePath = selectedFile;

    Serial.printf("Full file path: %s\n", fullFilePath.c_str());

    // Load the CSV file using the full file path
    //loadCSV(SD, fullFilePath.c_str());
    loadCSV(SD, "/Cu-2-8 mM/Cu-2mM.csv");
    
    createUI();
}




void listCSVFilesRecursively(fs::FS &fs, const char *dirname, std::vector<String> &csvFiles, std::vector<String> &csvFileNames) {
    Serial.printf("Listing CSV files in directory: %s\n", dirname);

    File root = fs.open(dirname);
    if (!root || !root.isDirectory()) {
        Serial.println("Failed to open directory");
        return;
    }

    File file = root.openNextFile();
    while (file) {
        if (file.isDirectory()) {
            listCSVFilesRecursively(fs, file.path(), csvFiles, csvFileNames);
        } else {
            String filePath = file.path();
            if (filePath.endsWith(".csv")) {
                Serial.printf("Found CSV file: %s\n", filePath.c_str());
                csvFiles.push_back(filePath);
                csvFileNames.push_back(file.name());
            }
        }
        file = root.openNextFile();
    }
}


struct PageData {
    int *current_page;
    int total_pages;
};

void prev_btn_event_handler(lv_event_t *e) {
    PageData *data = static_cast<PageData *>(lv_event_get_user_data(e));
    if (*(data->current_page) > 0) {
        (*(data->current_page))--;
        lv_obj_clean(lv_scr_act());
        createFileSelector();
    }
}

void next_btn_event_handler(lv_event_t *e) {
    PageData *data = static_cast<PageData *>(lv_event_get_user_data(e));
    if (*(data->current_page) < data->total_pages - 1) {
        (*(data->current_page))++;
        lv_obj_clean(lv_scr_act());
        createFileSelector();
    }
}

void createFileSelector() {
    lv_obj_t *title = lv_label_create(lv_scr_act());
    lv_label_set_text(title, "Please select your CSV file");
    lv_obj_set_style_text_font(title, &lv_font_montserrat_26, 0);
    lv_obj_set_style_text_color(title, lv_color_hex(0x00CFFF), 0);
    lv_obj_align(title, LV_ALIGN_TOP_MID, 0, 20);

    file_list = lv_list_create(lv_scr_act());
    lv_obj_set_size(file_list, 250, 300);
    lv_obj_align(file_list, LV_ALIGN_CENTER, 0, 60);
    lv_obj_clear_flag(file_list, LV_OBJ_FLAG_SCROLLABLE);

    static lv_style_t file_list_style;
    lv_style_init(&file_list_style);
    lv_style_set_radius(&file_list_style, 12);
    lv_style_set_border_width(&file_list_style, 2);
    lv_style_set_border_color(&file_list_style, lv_palette_main(LV_PALETTE_CYAN));
    lv_style_set_pad_all(&file_list_style, 10);
    lv_obj_add_style(file_list, &file_list_style, 0);

    std::vector<String> csvFiles;       // Vector for complete file paths
    std::vector<String> csvFileNames;   // Vector for file names only
    File root = SD.open("/");
    listCSVFilesRecursively(SD, "/", csvFiles, csvFileNames);


    // Pagination variables
    static int current_page = 0;
    int files_per_page = 5;
    int total_pages = (csvFileNames.size() + files_per_page - 1) / files_per_page;  // Use csvFileNames for pagination

    int start_idx = current_page * files_per_page;
    int end_idx = std::min(start_idx + files_per_page, (int)csvFileNames.size());

    // Create list buttons with file names from csvFileNames
    for (int i = start_idx; i < end_idx; i++) {
        String filename = csvFileNames[i];  // Use file names from csvFileNames vector
        lv_obj_t *btn = lv_list_add_btn(file_list, NULL, filename.c_str());

        // Pass the full path (csvFiles[i]) to the callback to open the correct file
        lv_obj_add_event_cb(btn, file_select_cb, LV_EVENT_CLICKED, (void *)csvFiles[i].c_str());
    }

    // Navigation buttons
    lv_obj_t *prev_btn = lv_btn_create(lv_scr_act());
    lv_obj_set_size(prev_btn, 50, 50);
    lv_obj_align(prev_btn, LV_ALIGN_BOTTOM_LEFT, 20, -20);
    lv_obj_t *prev_label = lv_label_create(prev_btn);
    lv_label_set_text(prev_label, "<");
    lv_obj_center(prev_label);

    lv_obj_t *next_btn = lv_btn_create(lv_scr_act());
    lv_obj_set_size(next_btn, 50, 50);
    lv_obj_align(next_btn, LV_ALIGN_BOTTOM_RIGHT, -20, -20);
    lv_obj_t *next_label = lv_label_create(next_btn);
    lv_label_set_text(next_label, ">");
    lv_obj_center(next_label);

    lv_obj_t *page_label = lv_label_create(lv_scr_act());
    lv_label_set_text_fmt(page_label, "Page %d/%d", current_page + 1, total_pages);
    lv_obj_align(page_label, LV_ALIGN_BOTTOM_MID, 0, -20);

    // Store page data for navigation
    static PageData pageData = {&current_page, total_pages};

    lv_obj_add_event_cb(prev_btn, prev_btn_event_handler, LV_EVENT_CLICKED, &pageData);
    lv_obj_add_event_cb(next_btn, next_btn_event_handler, LV_EVENT_CLICKED, &pageData);

    if (current_page == 0) {
        lv_obj_add_state(prev_btn, LV_STATE_DISABLED);
    }
    if (current_page == total_pages - 1) {
        lv_obj_add_state(next_btn, LV_STATE_DISABLED);
    }
}

float computeAreaUnderCurve() {
    float area = 0.0;
    for (int i = lowerLimit; i < upperLimit - 1; i++) {
        float x1 = array1[i];
        float x2 = array1[i + 1];
        float y1 = array2[i];
        float y2 = array2[i + 1];

        float dx = fabs(x2 - x1);  // Absolute value
        area += 0.5 * dx * (y1 + y2);
    }
    return area;
}




float computeConcentration(float area, float m, float c) {
    return m * area + c;
}

void update_button_cb(lv_event_t *e) {
    update_area_label();
}

void file_selector_button_cb(lv_event_t *e) {
    lv_obj_clean(lv_scr_act());
    createFileSelector();
}

void createUI() {
    Serial.println("Creating UI...");
    lv_obj_clean(lv_scr_act());

    // Create chart
    chart = lv_chart_create(lv_scr_act());
    lv_obj_set_size(chart, 600, 300);
    lv_obj_align(chart, LV_ALIGN_CENTER, 0, 50);
    series = lv_chart_add_series(chart, lv_palette_main(LV_PALETTE_BLUE), LV_CHART_AXIS_PRIMARY_Y);

    // Create slider 1
    slider1 = lv_slider_create(lv_scr_act());
    lv_obj_set_size(slider1, 300, 30);
    lv_slider_set_range(slider1, 0, arraySize - 1);
    lv_obj_align(slider1, LV_ALIGN_TOP_LEFT, 20, 20);
    lv_obj_add_event_cb(slider1, slider_event_cb, LV_EVENT_VALUE_CHANGED, NULL);

    label1 = lv_label_create(lv_scr_act());
    lv_label_set_text_fmt(label1, "Wavenumber 1: %d", lowerLimit);
    lv_obj_align_to(label1, slider1, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);

    // Create slider 2
    slider2 = lv_slider_create(lv_scr_act());
    lv_obj_set_size(slider2, 300, 30);
    lv_slider_set_range(slider2, 0, arraySize - 1);
    lv_obj_align(slider2, LV_ALIGN_TOP_RIGHT, -20, 20);
    lv_obj_add_event_cb(slider2, slider_event_cb, LV_EVENT_VALUE_CHANGED, NULL);

    label2 = lv_label_create(lv_scr_act());
    lv_label_set_text_fmt(label2, "Wavenumber 2: %d", upperLimit);
    lv_obj_align_to(label2, slider2, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);

    // Create area label
    area_label = lv_label_create(lv_scr_act());
    lv_label_set_text_fmt(area_label, "Area: %.2f", computeAreaUnderCurve());
    lv_obj_align(area_label, LV_ALIGN_BOTTOM_LEFT, 20, -40);

    // Create concentration label (centered between the sliders and the plot)
// Create concentration label (centered between the sliders and the plot)
// Create concentration label (centered between the sliders and the plot)
concentration_label = lv_label_create(lv_scr_act());
lv_label_set_text_fmt(concentration_label, "Concentration: %.2f", computeConcentration(computeAreaUnderCurve(), m_value, c_value));

// Create style for the concentration label
static lv_style_t concentration_style;
lv_style_init(&concentration_style);
lv_style_set_text_font(&concentration_style, &lv_font_montserrat_26);  // Larger font (replace if needed)
lv_style_set_text_color(&concentration_style, lv_palette_main(LV_PALETTE_RED));  // Use a striking color
lv_style_set_border_color(&concentration_style, lv_palette_darken(LV_PALETTE_BLUE, 3)); // Blue border
lv_style_set_border_width(&concentration_style, 2); // Slight border for emphasis
lv_style_set_bg_color(&concentration_style, lv_palette_lighten(LV_PALETTE_YELLOW, 2)); // Light yellow background
lv_style_set_pad_all(&concentration_style, 10);  // Padding for better spacing
lv_style_set_radius(&concentration_style, 8);  // Rounded corners

// Apply style to the concentration label (Pass 0 instead of LV_PART_MAIN)
lv_obj_add_style(concentration_label, &concentration_style, 0);

// Position the concentration label
lv_obj_align(concentration_label, LV_ALIGN_CENTER, 0, -120);


    // Create file selector button
    lv_obj_t *file_selector_button = lv_btn_create(lv_scr_act());
    lv_obj_align(file_selector_button, LV_ALIGN_BOTTOM_LEFT, 20, -100);
    lv_obj_add_event_cb(file_selector_button, file_selector_button_cb, LV_EVENT_CLICKED, NULL);

    lv_obj_t *file_selector_label = lv_label_create(file_selector_button);
    lv_label_set_text(file_selector_label, "Select CSV File");
    lv_obj_center(file_selector_label);

    // Initially update the chart, area, and concentration labels
    update_chart();     // Initial chart update
    update_area_label();  // Initial area and concentration label update
}

// ---------------------------------------------------------------------------------------------------

//void setup()
//{
//    String title = "LVGL porting example";
//
//    Serial.begin(115200);
//
//    Serial.println("Initialize IO expander");
////    /* Initialize IO expander */
//    expander = new esp_expander::CH422G(EXAMPLE_I2C_SCL_PIN, EXAMPLE_I2C_SDA_PIN, EXAMPLE_I2C_ADDR);
//    expander->init();
//    expander->begin();
////
//    Serial.println("Set the IO0-7 pin to output mode.");
//    expander->enableAllIO_Output();
////    expander->digitalWrite(TP_RST , HIGH);
////    expander->digitalWrite(LCD_RST , HIGH);
////    expander->digitalWrite(LCD_BL , HIGH);
////
//
//expander->digitalWrite(LCD_RST , HIGH);
//expander->digitalWrite(LCD_BL , HIGH);
//expander->digitalWrite(SD_CS, HIGH);  // Deselect SD card
//
//
////    // Use extended GPIO for SD card
////    expander->digitalWrite(SD_CS, LOW);
////    //expander->digitalWrite(USB_SEL, LOW);
////
////    // Initialize SPI
////    SPI.setHwCs(false);
////    SPI.begin(SD_CLK, SD_MISO, SD_MOSI, SD_SS);
////    if (!SD.begin(SD_SS)) {
////        Serial.println("Card Mount Failed"); // SD card mounting failed
////        return;
////    }
////    uint8_t cardType = SD.cardType();
////
////    if (cardType == CARD_NONE) {
////        Serial.println("No SD card attached"); // No SD card connected
////        return;
////    }
//
//    Serial.println("Initializing board");
//    Board *board = new Board();
//    board->init();
//
//    if (!board->begin()) {
//    Serial.println("Board begin failed, aborting.");
//    while (true) delay(1000);
//}
////
////    if (!board->init() || !board->begin()) {
////    Serial.println("Board init failed, aborting.");
////    while (true) delay(1000);
////}
////
////
////    if (!expander->init() || !expander->begin()) {
////    Serial.println("IO expander init failed, aborting.");
////    while (true) delay(1000);
////}
////
//
//// Only now initialize LVGL and create UI
//if (!lvgl_port_init(board->getLCD(), board->getTouch())) {
//    Serial.println("LVGL init failed, aborting.");
//    while (true) delay(1000);
//}
//
//
//    #if LVGL_PORT_AVOID_TEARING_MODE
//    auto lcd = board->getLCD();
//    // When avoid tearing function is enabled, the frame buffer number should be set in the board driver
//    lcd->configFrameBufferNumber(LVGL_PORT_DISP_BUFFER_NUM);
//#if ESP_PANEL_DRIVERS_BUS_ENABLE_RGB && CONFIG_IDF_TARGET_ESP32S3
//    auto lcd_bus = lcd->getBus();
//    /**
//     * As the anti-tearing feature typically consumes more PSRAM bandwidth, for the ESP32-S3, we need to utilize the
//     * "bounce buffer" functionality to enhance the RGB data bandwidth.
//     * This feature will consume `bounce_buffer_size * bytes_per_pixel * 2` of SRAM memory.
//     */
//    if (lcd_bus->getBasicAttributes().type == ESP_PANEL_BUS_TYPE_RGB) {
//        static_cast<BusRGB *>(lcd_bus)->configRGB_BounceBufferSize(lcd->getFrameWidth() * 10);
//    }
//#endif
//#endif
//    assert(board->begin());
//    
//
//    Serial.println("Initializing LVGL");
//    lvgl_port_init(board->getLCD(), board->getTouch());
//
//    Serial.println("Creating UI");
//    /* Lock the mutex due to the LVGL APIs are not thread-safe */
//    lvgl_port_lock(-1);
//    createFileSelector();
//    lvgl_port_unlock();
//
//
//    
//}


void setup() {
    Serial.begin(115200);
    Serial.println("LVGL porting example");

    // 1. Initialize I/O Expander
    Serial.println("Initializing IO expander");
    expander = new esp_expander::CH422G(EXAMPLE_I2C_SCL_PIN, EXAMPLE_I2C_SDA_PIN, EXAMPLE_I2C_ADDR);
    expander->init();
    expander->begin();
    expander->enableAllIO_Output();

    // 2. Setup LCD and Backlight
    expander->digitalWrite(LCD_RST , HIGH);
    expander->digitalWrite(LCD_BL , HIGH);
    expander->digitalWrite(SD_CS, HIGH);  // Deselect SD card

    // 3. Init SPI (shared bus, manual CS)
    SPI.setHwCs(false);
    SPI.begin(SD_CLK, SD_MISO, SD_MOSI, -1);  // CS managed manually via expander

    // 4. Initialize Board (Display + Touch)
//    Serial.println("Initializing board");
//    Board *board = new Board();
//    board->init();
//    if (!board->begin()) {
//        Serial.println("Board begin failed");
//        while (true) delay(1000);
//    }
//
//    // 5. Initialize LVGL
//    if (!lvgl_port_init(board->getLCD(), board->getTouch())) {
//        Serial.println("LVGL init failed");
//        while (true) delay(1000);
//    }
//
    // 6. Initialize SD card (after display setup)
    Serial.println("Mounting SD card...");
    expander->digitalWrite(SD_CS, LOW);  // Select card
    if (!SD.begin(-1)) {
        Serial.println("Card Mount Failed");
        Serial.println("ahh");
        return;
    }
    expander->digitalWrite(SD_CS, HIGH); // Deselect after mount
//
//    // 7. Create UI
//    Serial.println("Creating UI");
//    lvgl_port_lock(-1);
//   // createFileSelector();  // Replace with your actual LVGL UI
//    lvgl_port_unlock();
}
void loop()
{
    Serial.println("IDLE loop");
    listDir(SD, "/", 0);
    delay(1000);
}
